/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace OTSpaceship {
  export type SpaceshipAmountStruct = {
    contributors: PromiseOrValue<BigNumberish>;
    partner: PromiseOrValue<BigNumberish>;
    publicSale: PromiseOrValue<BigNumberish>;
    airdrop: PromiseOrValue<BigNumberish>;
  };

  export type SpaceshipAmountStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    contributors: BigNumber;
    partner: BigNumber;
    publicSale: BigNumber;
    airdrop: BigNumber;
  };

  export type ContributorAmountStruct = {
    contributor: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type ContributorAmountStructOutput = [string, BigNumber] & {
    contributor: string;
    amount: BigNumber;
  };

  export type AirdropAmountStruct = {
    airdrop: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type AirdropAmountStructOutput = [string, BigNumber] & {
    airdrop: string;
    amount: BigNumber;
  };
}

export interface OTSInterface extends utils.Interface {
  functions: {
    "MAX_AIRDROP_AMOUNT()": FunctionFragment;
    "MAX_MINT_PER_BLOCK()": FunctionFragment;
    "MAX_PARTNER_AMOUNT()": FunctionFragment;
    "MAX_PUBLIC_SALE_AMOUNT()": FunctionFragment;
    "MAX_RESERVED_CONTRIBUTORS_AMOUNT()": FunctionFragment;
    "MAX_SPACESHIPS()": FunctionFragment;
    "adminClaimStarted()": FunctionFragment;
    "airdropClaimActive()": FunctionFragment;
    "airdropClaimSpaceship(uint256,address)": FunctionFragment;
    "airdropClaimedAmount()": FunctionFragment;
    "airdrops(address)": FunctionFragment;
    "alphaOffset()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "betaOffset()": FunctionFragment;
    "claimUnclaimedAndUnsoldSpaceships(address)": FunctionFragment;
    "claimUnclaimedAndUnsoldSpaceshipsWithAmount(address,uint256)": FunctionFragment;
    "claimableActive()": FunctionFragment;
    "contributors(address)": FunctionFragment;
    "contributorsClaimActive()": FunctionFragment;
    "contributorsClaimSpaceship(uint256,address)": FunctionFragment;
    "contributorsClaimedAmount()": FunctionFragment;
    "contributorsPrice()": FunctionFragment;
    "currentNumSpaceshipsMintedPublicSale()": FunctionFragment;
    "fee()": FunctionFragment;
    "futureMinter()": FunctionFragment;
    "futureSpaceshipsNftIdCurrent()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getMintPrice()": FunctionFragment;
    "getMintPriceContributor()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isRandomRequestForPublicSaleAndContributors(bytes32)": FunctionFragment;
    "keyHash()": FunctionFragment;
    "kycMerkleRoot()": FunctionFragment;
    "maxMintPerAddress()": FunctionFragment;
    "maxMintPerTx()": FunctionFragment;
    "mintFutureSpaceships(address)": FunctionFragment;
    "mintFutureSpaceshipsWithAmount(address,uint256)": FunctionFragment;
    "mintIndexAirdrop()": FunctionFragment;
    "mintIndexPublicSaleAndContributors()": FunctionFragment;
    "mintSpaceship(uint256,bytes32[])": FunctionFragment;
    "mintSpaceshipPartner(uint256,bytes32[])": FunctionFragment;
    "mintedPerAddress(address)": FunctionFragment;
    "name()": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerClaimRandomnessRequested()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "partnerClaimedAmount()": FunctionFragment;
    "publicSaleActive()": FunctionFragment;
    "publicSaleAndContributorsOffset()": FunctionFragment;
    "publicSaleAndContributorsRandomnessRequested()": FunctionFragment;
    "publicSalePrice()": FunctionFragment;
    "publicSaleStartTime()": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestRandomnessForOwnerClaim()": FunctionFragment;
    "requestRandomnessForPublicSaleAndContributors()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setAirdrops((address,uint256)[])": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContributors((address,uint256)[])": FunctionFragment;
    "setContributorsPrice(uint256)": FunctionFragment;
    "setFutureMinter(address)": FunctionFragment;
    "setKycCheckRequired(bool)": FunctionFragment;
    "setKycMerkleRoot(bytes32)": FunctionFragment;
    "setMaxMintPerAddress(uint256)": FunctionFragment;
    "setMaxMintPerTx(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPublicSalePrice(uint256)": FunctionFragment;
    "startAirdropClaimPeriod()": FunctionFragment;
    "startContributorsClaimPeriod()": FunctionFragment;
    "startPublicSale(uint256,uint256,uint256,bool)": FunctionFragment;
    "stopAirdropClaimPeriod()": FunctionFragment;
    "stopContributorsClaimPeriod()": FunctionFragment;
    "stopPublicSale()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_AIRDROP_AMOUNT"
      | "MAX_MINT_PER_BLOCK"
      | "MAX_PARTNER_AMOUNT"
      | "MAX_PUBLIC_SALE_AMOUNT"
      | "MAX_RESERVED_CONTRIBUTORS_AMOUNT"
      | "MAX_SPACESHIPS"
      | "adminClaimStarted"
      | "airdropClaimActive"
      | "airdropClaimSpaceship"
      | "airdropClaimedAmount"
      | "airdrops"
      | "alphaOffset"
      | "approve"
      | "balanceOf"
      | "betaOffset"
      | "claimUnclaimedAndUnsoldSpaceships"
      | "claimUnclaimedAndUnsoldSpaceshipsWithAmount"
      | "claimableActive"
      | "contributors"
      | "contributorsClaimActive"
      | "contributorsClaimSpaceship"
      | "contributorsClaimedAmount"
      | "contributorsPrice"
      | "currentNumSpaceshipsMintedPublicSale"
      | "fee"
      | "futureMinter"
      | "futureSpaceshipsNftIdCurrent"
      | "getApproved"
      | "getMintPrice"
      | "getMintPriceContributor"
      | "isApprovedForAll"
      | "isRandomRequestForPublicSaleAndContributors"
      | "keyHash"
      | "kycMerkleRoot"
      | "maxMintPerAddress"
      | "maxMintPerTx"
      | "mintFutureSpaceships"
      | "mintFutureSpaceshipsWithAmount"
      | "mintIndexAirdrop"
      | "mintIndexPublicSaleAndContributors"
      | "mintSpaceship"
      | "mintSpaceshipPartner"
      | "mintedPerAddress"
      | "name"
      | "operator"
      | "owner"
      | "ownerClaimRandomnessRequested"
      | "ownerOf"
      | "partnerClaimedAmount"
      | "publicSaleActive"
      | "publicSaleAndContributorsOffset"
      | "publicSaleAndContributorsRandomnessRequested"
      | "publicSalePrice"
      | "publicSaleStartTime"
      | "rawFulfillRandomness"
      | "renounceOwnership"
      | "requestRandomnessForOwnerClaim"
      | "requestRandomnessForPublicSaleAndContributors"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAirdrops"
      | "setApprovalForAll"
      | "setBaseURI"
      | "setContributors"
      | "setContributorsPrice"
      | "setFutureMinter"
      | "setKycCheckRequired"
      | "setKycMerkleRoot"
      | "setMaxMintPerAddress"
      | "setMaxMintPerTx"
      | "setOperator"
      | "setPublicSalePrice"
      | "startAirdropClaimPeriod"
      | "startContributorsClaimPeriod"
      | "startPublicSale"
      | "stopAirdropClaimPeriod"
      | "stopContributorsClaimPeriod"
      | "stopPublicSale"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_AIRDROP_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MINT_PER_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PARTNER_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PUBLIC_SALE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RESERVED_CONTRIBUTORS_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SPACESHIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminClaimStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropClaimActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropClaimSpaceship",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropClaimedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdrops",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "alphaOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "betaOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnclaimedAndUnsoldSpaceships",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnclaimedAndUnsoldSpaceshipsWithAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorsClaimActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributorsClaimSpaceship",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorsClaimedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributorsPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentNumSpaceshipsMintedPublicSale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "futureMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "futureSpaceshipsNftIdCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintPriceContributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRandomRequestForPublicSaleAndContributors",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kycMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintPerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintFutureSpaceships",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFutureSpaceshipsWithAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintIndexAirdrop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintIndexPublicSaleAndContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintSpaceship",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSpaceshipPartner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedPerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerClaimRandomnessRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "partnerClaimedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleAndContributorsOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleAndContributorsRandomnessRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSalePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomnessForOwnerClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomnessForPublicSaleAndContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAirdrops",
    values: [OTSpaceship.AirdropAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContributors",
    values: [OTSpaceship.ContributorAmountStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setContributorsPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFutureMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKycCheckRequired",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKycMerkleRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMintPerAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMintPerTx",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSalePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startAirdropClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startContributorsClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPublicSale",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stopAirdropClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopContributorsClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopPublicSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_AIRDROP_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MINT_PER_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PARTNER_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PUBLIC_SALE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RESERVED_CONTRIBUTORS_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SPACESHIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminClaimStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropClaimActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropClaimSpaceship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropClaimedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airdrops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alphaOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betaOffset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimUnclaimedAndUnsoldSpaceships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimUnclaimedAndUnsoldSpaceshipsWithAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorsClaimActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorsClaimSpaceship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorsClaimedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorsPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNumSpaceshipsMintedPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "futureMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureSpaceshipsNftIdCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintPriceContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRandomRequestForPublicSaleAndContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kycMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMintPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMintPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFutureSpaceships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFutureSpaceshipsWithAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintIndexAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintIndexPublicSaleAndContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSpaceship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSpaceshipPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerClaimRandomnessRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partnerClaimedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleAndContributorsOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleAndContributorsRandomnessRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomnessForOwnerClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomnessForPublicSaleAndContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAirdrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContributorsPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFutureMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKycCheckRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKycMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMintPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMintPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAirdropClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startContributorsClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopAirdropClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopContributorsClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AirdropClaimStart(uint256)": EventFragment;
    "AirdropClaimStop(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ClaimableStateChanged(bool)": EventFragment;
    "ContributorsClaimStart(uint256)": EventFragment;
    "ContributorsClaimStop(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PublicSaleMint(address,uint256,uint256)": EventFragment;
    "SpaceshipPublicSaleStart(uint256)": EventFragment;
    "SpaceshipPublicSaleStop(uint256)": EventFragment;
    "StartingIndexSetAlphaBeta(uint256,uint256)": EventFragment;
    "StartingIndexSetPublicSale(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropClaimStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AirdropClaimStop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimableStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributorsClaimStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributorsClaimStop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicSaleMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceshipPublicSaleStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpaceshipPublicSaleStop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartingIndexSetAlphaBeta"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartingIndexSetPublicSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AirdropClaimStartEventObject {
  _timestamp: BigNumber;
}
export type AirdropClaimStartEvent = TypedEvent<
  [BigNumber],
  AirdropClaimStartEventObject
>;

export type AirdropClaimStartEventFilter =
  TypedEventFilter<AirdropClaimStartEvent>;

export interface AirdropClaimStopEventObject {
  _timestamp: BigNumber;
}
export type AirdropClaimStopEvent = TypedEvent<
  [BigNumber],
  AirdropClaimStopEventObject
>;

export type AirdropClaimStopEventFilter =
  TypedEventFilter<AirdropClaimStopEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ClaimableStateChangedEventObject {
  claimableActive: boolean;
}
export type ClaimableStateChangedEvent = TypedEvent<
  [boolean],
  ClaimableStateChangedEventObject
>;

export type ClaimableStateChangedEventFilter =
  TypedEventFilter<ClaimableStateChangedEvent>;

export interface ContributorsClaimStartEventObject {
  _timestamp: BigNumber;
}
export type ContributorsClaimStartEvent = TypedEvent<
  [BigNumber],
  ContributorsClaimStartEventObject
>;

export type ContributorsClaimStartEventFilter =
  TypedEventFilter<ContributorsClaimStartEvent>;

export interface ContributorsClaimStopEventObject {
  _timestamp: BigNumber;
}
export type ContributorsClaimStopEvent = TypedEvent<
  [BigNumber],
  ContributorsClaimStopEventObject
>;

export type ContributorsClaimStopEventFilter =
  TypedEventFilter<ContributorsClaimStopEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PublicSaleMintEventObject {
  sender: string;
  numSpaceships: BigNumber;
  mintPrice: BigNumber;
}
export type PublicSaleMintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PublicSaleMintEventObject
>;

export type PublicSaleMintEventFilter = TypedEventFilter<PublicSaleMintEvent>;

export interface SpaceshipPublicSaleStartEventObject {
  _saleStartTime: BigNumber;
}
export type SpaceshipPublicSaleStartEvent = TypedEvent<
  [BigNumber],
  SpaceshipPublicSaleStartEventObject
>;

export type SpaceshipPublicSaleStartEventFilter =
  TypedEventFilter<SpaceshipPublicSaleStartEvent>;

export interface SpaceshipPublicSaleStopEventObject {
  _currentPrice: BigNumber;
}
export type SpaceshipPublicSaleStopEvent = TypedEvent<
  [BigNumber],
  SpaceshipPublicSaleStopEventObject
>;

export type SpaceshipPublicSaleStopEventFilter =
  TypedEventFilter<SpaceshipPublicSaleStopEvent>;

export interface StartingIndexSetAlphaBetaEventObject {
  _alphaOffset: BigNumber;
  _betaOffset: BigNumber;
}
export type StartingIndexSetAlphaBetaEvent = TypedEvent<
  [BigNumber, BigNumber],
  StartingIndexSetAlphaBetaEventObject
>;

export type StartingIndexSetAlphaBetaEventFilter =
  TypedEventFilter<StartingIndexSetAlphaBetaEvent>;

export interface StartingIndexSetPublicSaleEventObject {
  _startingIndex: BigNumber;
}
export type StartingIndexSetPublicSaleEvent = TypedEvent<
  [BigNumber],
  StartingIndexSetPublicSaleEventObject
>;

export type StartingIndexSetPublicSaleEventFilter =
  TypedEventFilter<StartingIndexSetPublicSaleEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface OTS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OTSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_MINT_PER_BLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PARTNER_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PUBLIC_SALE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_RESERVED_CONTRIBUTORS_AMOUNT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_SPACESHIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminClaimStarted(overrides?: CallOverrides): Promise<[boolean]>;

    airdropClaimActive(overrides?: CallOverrides): Promise<[boolean]>;

    airdropClaimSpaceship(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    airdropClaimedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    airdrops(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    alphaOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    betaOffset(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimUnclaimedAndUnsoldSpaceships(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimUnclaimedAndUnsoldSpaceshipsWithAmount(
      recipient: PromiseOrValue<string>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableActive(overrides?: CallOverrides): Promise<[boolean]>;

    contributors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contributorsClaimActive(overrides?: CallOverrides): Promise<[boolean]>;

    contributorsClaimSpaceship(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributorsClaimedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    contributorsPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentNumSpaceshipsMintedPublicSale(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    futureMinter(overrides?: CallOverrides): Promise<[string]>;

    futureSpaceshipsNftIdCurrent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintPriceContributor(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRandomRequestForPublicSaleAndContributors(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keyHash(overrides?: CallOverrides): Promise<[string]>;

    kycMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    maxMintPerAddress(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMintPerTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintFutureSpaceships(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintFutureSpaceshipsWithAmount(
      recipient: PromiseOrValue<string>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintIndexAirdrop(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintIndexPublicSaleAndContributors(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintSpaceship(
      numSpaceships: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintSpaceshipPartner(
      numSpaceships: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintedPerAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerClaimRandomnessRequested(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    partnerClaimedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleActive(overrides?: CallOverrides): Promise<[boolean]>;

    publicSaleAndContributorsOffset(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publicSaleAndContributorsRandomnessRequested(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    publicSalePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawFulfillRandomness(
      requestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRandomnessForOwnerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRandomnessForPublicSaleAndContributors(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAirdrops(
      _airdrops: OTSpaceship.AirdropAmountStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContributors(
      _contributors: OTSpaceship.ContributorAmountStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContributorsPrice(
      _contributorsPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFutureMinter(
      _futureMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKycCheckRequired(
      _isKycCheckRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKycMerkleRoot(
      _kycMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxMintPerAddress(
      _maxMintPerAddress: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxMintPerTx(
      _maxMintPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPublicSalePrice(
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startAirdropClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startContributorsClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startPublicSale(
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      _maxMintPerTx: PromiseOrValue<BigNumberish>,
      _maxMintPerAddress: PromiseOrValue<BigNumberish>,
      _isKycCheckRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopAirdropClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopContributorsClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopPublicSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_MINT_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PARTNER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PUBLIC_SALE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_RESERVED_CONTRIBUTORS_AMOUNT(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_SPACESHIPS(overrides?: CallOverrides): Promise<BigNumber>;

  adminClaimStarted(overrides?: CallOverrides): Promise<boolean>;

  airdropClaimActive(overrides?: CallOverrides): Promise<boolean>;

  airdropClaimSpaceship(
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  airdropClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  airdrops(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  alphaOffset(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  betaOffset(overrides?: CallOverrides): Promise<BigNumber>;

  claimUnclaimedAndUnsoldSpaceships(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimUnclaimedAndUnsoldSpaceshipsWithAmount(
    recipient: PromiseOrValue<string>,
    maxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableActive(overrides?: CallOverrides): Promise<boolean>;

  contributors(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contributorsClaimActive(overrides?: CallOverrides): Promise<boolean>;

  contributorsClaimSpaceship(
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributorsClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  contributorsPrice(overrides?: CallOverrides): Promise<BigNumber>;

  currentNumSpaceshipsMintedPublicSale(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  futureMinter(overrides?: CallOverrides): Promise<string>;

  futureSpaceshipsNftIdCurrent(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMintPriceContributor(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRandomRequestForPublicSaleAndContributors(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keyHash(overrides?: CallOverrides): Promise<string>;

  kycMerkleRoot(overrides?: CallOverrides): Promise<string>;

  maxMintPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

  maxMintPerTx(overrides?: CallOverrides): Promise<BigNumber>;

  mintFutureSpaceships(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintFutureSpaceshipsWithAmount(
    recipient: PromiseOrValue<string>,
    maxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintIndexAirdrop(overrides?: CallOverrides): Promise<BigNumber>;

  mintIndexPublicSaleAndContributors(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintSpaceship(
    numSpaceships: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintSpaceshipPartner(
    numSpaceships: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintedPerAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerClaimRandomnessRequested(overrides?: CallOverrides): Promise<boolean>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  partnerClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleActive(overrides?: CallOverrides): Promise<boolean>;

  publicSaleAndContributorsOffset(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  publicSaleAndContributorsRandomnessRequested(
    overrides?: CallOverrides
  ): Promise<boolean>;

  publicSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomness(
    requestId: PromiseOrValue<BytesLike>,
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRandomnessForOwnerClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRandomnessForPublicSaleAndContributors(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAirdrops(
    _airdrops: OTSpaceship.AirdropAmountStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContributors(
    _contributors: OTSpaceship.ContributorAmountStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContributorsPrice(
    _contributorsPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFutureMinter(
    _futureMinter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKycCheckRequired(
    _isKycCheckRequired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKycMerkleRoot(
    _kycMerkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxMintPerAddress(
    _maxMintPerAddress: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxMintPerTx(
    _maxMintPerTx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPublicSalePrice(
    _publicSalePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startAirdropClaimPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startContributorsClaimPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startPublicSale(
    _publicSalePrice: PromiseOrValue<BigNumberish>,
    _maxMintPerTx: PromiseOrValue<BigNumberish>,
    _maxMintPerAddress: PromiseOrValue<BigNumberish>,
    _isKycCheckRequired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopAirdropClaimPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopContributorsClaimPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopPublicSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MINT_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PARTNER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PUBLIC_SALE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RESERVED_CONTRIBUTORS_AMOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_SPACESHIPS(overrides?: CallOverrides): Promise<BigNumber>;

    adminClaimStarted(overrides?: CallOverrides): Promise<boolean>;

    airdropClaimActive(overrides?: CallOverrides): Promise<boolean>;

    airdropClaimSpaceship(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    airdrops(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    alphaOffset(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betaOffset(overrides?: CallOverrides): Promise<BigNumber>;

    claimUnclaimedAndUnsoldSpaceships(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimUnclaimedAndUnsoldSpaceshipsWithAmount(
      recipient: PromiseOrValue<string>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableActive(overrides?: CallOverrides): Promise<boolean>;

    contributors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributorsClaimActive(overrides?: CallOverrides): Promise<boolean>;

    contributorsClaimSpaceship(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    contributorsClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    contributorsPrice(overrides?: CallOverrides): Promise<BigNumber>;

    currentNumSpaceshipsMintedPublicSale(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    futureMinter(overrides?: CallOverrides): Promise<string>;

    futureSpaceshipsNftIdCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMintPriceContributor(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRandomRequestForPublicSaleAndContributors(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keyHash(overrides?: CallOverrides): Promise<string>;

    kycMerkleRoot(overrides?: CallOverrides): Promise<string>;

    maxMintPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    mintFutureSpaceships(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintFutureSpaceshipsWithAmount(
      recipient: PromiseOrValue<string>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintIndexAirdrop(overrides?: CallOverrides): Promise<BigNumber>;

    mintIndexPublicSaleAndContributors(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSpaceship(
      numSpaceships: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintSpaceshipPartner(
      numSpaceships: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintedPerAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerClaimRandomnessRequested(overrides?: CallOverrides): Promise<boolean>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    partnerClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleActive(overrides?: CallOverrides): Promise<boolean>;

    publicSaleAndContributorsOffset(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicSaleAndContributorsRandomnessRequested(
      overrides?: CallOverrides
    ): Promise<boolean>;

    publicSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestRandomnessForOwnerClaim(overrides?: CallOverrides): Promise<string>;

    requestRandomnessForPublicSaleAndContributors(
      overrides?: CallOverrides
    ): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAirdrops(
      _airdrops: OTSpaceship.AirdropAmountStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContributors(
      _contributors: OTSpaceship.ContributorAmountStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setContributorsPrice(
      _contributorsPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFutureMinter(
      _futureMinter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKycCheckRequired(
      _isKycCheckRequired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKycMerkleRoot(
      _kycMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMintPerAddress(
      _maxMintPerAddress: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMintPerTx(
      _maxMintPerTx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicSalePrice(
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startAirdropClaimPeriod(overrides?: CallOverrides): Promise<void>;

    startContributorsClaimPeriod(overrides?: CallOverrides): Promise<void>;

    startPublicSale(
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      _maxMintPerTx: PromiseOrValue<BigNumberish>,
      _maxMintPerAddress: PromiseOrValue<BigNumberish>,
      _isKycCheckRequired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopAirdropClaimPeriod(overrides?: CallOverrides): Promise<void>;

    stopContributorsClaimPeriod(overrides?: CallOverrides): Promise<void>;

    stopPublicSale(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AirdropClaimStart(uint256)"(
      _timestamp?: null
    ): AirdropClaimStartEventFilter;
    AirdropClaimStart(_timestamp?: null): AirdropClaimStartEventFilter;

    "AirdropClaimStop(uint256)"(_timestamp?: null): AirdropClaimStopEventFilter;
    AirdropClaimStop(_timestamp?: null): AirdropClaimStopEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ClaimableStateChanged(bool)"(
      claimableActive?: PromiseOrValue<boolean> | null
    ): ClaimableStateChangedEventFilter;
    ClaimableStateChanged(
      claimableActive?: PromiseOrValue<boolean> | null
    ): ClaimableStateChangedEventFilter;

    "ContributorsClaimStart(uint256)"(
      _timestamp?: null
    ): ContributorsClaimStartEventFilter;
    ContributorsClaimStart(
      _timestamp?: null
    ): ContributorsClaimStartEventFilter;

    "ContributorsClaimStop(uint256)"(
      _timestamp?: null
    ): ContributorsClaimStopEventFilter;
    ContributorsClaimStop(_timestamp?: null): ContributorsClaimStopEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PublicSaleMint(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      numSpaceships?: PromiseOrValue<BigNumberish> | null,
      mintPrice?: PromiseOrValue<BigNumberish> | null
    ): PublicSaleMintEventFilter;
    PublicSaleMint(
      sender?: PromiseOrValue<string> | null,
      numSpaceships?: PromiseOrValue<BigNumberish> | null,
      mintPrice?: PromiseOrValue<BigNumberish> | null
    ): PublicSaleMintEventFilter;

    "SpaceshipPublicSaleStart(uint256)"(
      _saleStartTime?: PromiseOrValue<BigNumberish> | null
    ): SpaceshipPublicSaleStartEventFilter;
    SpaceshipPublicSaleStart(
      _saleStartTime?: PromiseOrValue<BigNumberish> | null
    ): SpaceshipPublicSaleStartEventFilter;

    "SpaceshipPublicSaleStop(uint256)"(
      _currentPrice?: PromiseOrValue<BigNumberish> | null
    ): SpaceshipPublicSaleStopEventFilter;
    SpaceshipPublicSaleStop(
      _currentPrice?: PromiseOrValue<BigNumberish> | null
    ): SpaceshipPublicSaleStopEventFilter;

    "StartingIndexSetAlphaBeta(uint256,uint256)"(
      _alphaOffset?: PromiseOrValue<BigNumberish> | null,
      _betaOffset?: PromiseOrValue<BigNumberish> | null
    ): StartingIndexSetAlphaBetaEventFilter;
    StartingIndexSetAlphaBeta(
      _alphaOffset?: PromiseOrValue<BigNumberish> | null,
      _betaOffset?: PromiseOrValue<BigNumberish> | null
    ): StartingIndexSetAlphaBetaEventFilter;

    "StartingIndexSetPublicSale(uint256)"(
      _startingIndex?: PromiseOrValue<BigNumberish> | null
    ): StartingIndexSetPublicSaleEventFilter;
    StartingIndexSetPublicSale(
      _startingIndex?: PromiseOrValue<BigNumberish> | null
    ): StartingIndexSetPublicSaleEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    MAX_AIRDROP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MINT_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PARTNER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PUBLIC_SALE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RESERVED_CONTRIBUTORS_AMOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_SPACESHIPS(overrides?: CallOverrides): Promise<BigNumber>;

    adminClaimStarted(overrides?: CallOverrides): Promise<BigNumber>;

    airdropClaimActive(overrides?: CallOverrides): Promise<BigNumber>;

    airdropClaimSpaceship(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    airdropClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    airdrops(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    alphaOffset(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betaOffset(overrides?: CallOverrides): Promise<BigNumber>;

    claimUnclaimedAndUnsoldSpaceships(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimUnclaimedAndUnsoldSpaceshipsWithAmount(
      recipient: PromiseOrValue<string>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableActive(overrides?: CallOverrides): Promise<BigNumber>;

    contributors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributorsClaimActive(overrides?: CallOverrides): Promise<BigNumber>;

    contributorsClaimSpaceship(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributorsClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    contributorsPrice(overrides?: CallOverrides): Promise<BigNumber>;

    currentNumSpaceshipsMintedPublicSale(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    futureMinter(overrides?: CallOverrides): Promise<BigNumber>;

    futureSpaceshipsNftIdCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMintPriceContributor(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRandomRequestForPublicSaleAndContributors(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyHash(overrides?: CallOverrides): Promise<BigNumber>;

    kycMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintPerTx(overrides?: CallOverrides): Promise<BigNumber>;

    mintFutureSpaceships(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintFutureSpaceshipsWithAmount(
      recipient: PromiseOrValue<string>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintIndexAirdrop(overrides?: CallOverrides): Promise<BigNumber>;

    mintIndexPublicSaleAndContributors(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSpaceship(
      numSpaceships: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintSpaceshipPartner(
      numSpaceships: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintedPerAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerClaimRandomnessRequested(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partnerClaimedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleActive(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleAndContributorsOffset(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicSaleAndContributorsRandomnessRequested(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRandomnessForOwnerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRandomnessForPublicSaleAndContributors(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAirdrops(
      _airdrops: OTSpaceship.AirdropAmountStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContributors(
      _contributors: OTSpaceship.ContributorAmountStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContributorsPrice(
      _contributorsPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFutureMinter(
      _futureMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKycCheckRequired(
      _isKycCheckRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKycMerkleRoot(
      _kycMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxMintPerAddress(
      _maxMintPerAddress: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxMintPerTx(
      _maxMintPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPublicSalePrice(
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startAirdropClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startContributorsClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startPublicSale(
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      _maxMintPerTx: PromiseOrValue<BigNumberish>,
      _maxMintPerAddress: PromiseOrValue<BigNumberish>,
      _isKycCheckRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopAirdropClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopContributorsClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopPublicSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_AIRDROP_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_MINT_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PARTNER_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PUBLIC_SALE_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_RESERVED_CONTRIBUTORS_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SPACESHIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminClaimStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdropClaimActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdropClaimSpaceship(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    airdropClaimedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdrops(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alphaOffset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    betaOffset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimUnclaimedAndUnsoldSpaceships(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimUnclaimedAndUnsoldSpaceshipsWithAmount(
      recipient: PromiseOrValue<string>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributorsClaimActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributorsClaimSpaceship(
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributorsClaimedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributorsPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentNumSpaceshipsMintedPublicSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    futureMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    futureSpaceshipsNftIdCurrent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintPriceContributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRandomRequestForPublicSaleAndContributors(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kycMerkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMintPerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMintPerTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFutureSpaceships(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintFutureSpaceshipsWithAmount(
      recipient: PromiseOrValue<string>,
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintIndexAirdrop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintIndexPublicSaleAndContributors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintSpaceship(
      numSpaceships: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintSpaceshipPartner(
      numSpaceships: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintedPerAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerClaimRandomnessRequested(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partnerClaimedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicSaleAndContributorsOffset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleAndContributorsRandomnessRequested(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSalePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicSaleStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomnessForOwnerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomnessForPublicSaleAndContributors(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAirdrops(
      _airdrops: OTSpaceship.AirdropAmountStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContributors(
      _contributors: OTSpaceship.ContributorAmountStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContributorsPrice(
      _contributorsPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFutureMinter(
      _futureMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKycCheckRequired(
      _isKycCheckRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKycMerkleRoot(
      _kycMerkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMintPerAddress(
      _maxMintPerAddress: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMintPerTx(
      _maxMintPerTx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSalePrice(
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startAirdropClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startContributorsClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startPublicSale(
      _publicSalePrice: PromiseOrValue<BigNumberish>,
      _maxMintPerTx: PromiseOrValue<BigNumberish>,
      _maxMintPerAddress: PromiseOrValue<BigNumberish>,
      _isKycCheckRequired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopAirdropClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopContributorsClaimPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopPublicSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
